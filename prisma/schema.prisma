generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                String              @id @default(cuid())
  email             String              @unique
  password          String
  role_id           String
  on_boarding       Boolean             @default(false)
  is_verified       Boolean             @default(false)
  is_active         Boolean             @default(true)
  user_profile      user_profile?
  role              roles               @relation(fields: [role_id], references: [id], onDelete: Cascade)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  job_posts         job_posts[]
  job_applications  job_applications[]
}

model user_profile {
  id                String              @id @default(cuid())
  user_id           String              @unique
  avatarUrl         String?
  firstName String?
  lastName String?
  Availability      String?
  Website           String?
  Bio               String?
  role              String?
  publicEmail       String?
  city_id           String?
  country_id        String?
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  user              user                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  city              city?               @relation(fields: [city_id], references: [id])
  country           country?            @relation(fields: [country_id], references: [id])
  skills            skills[]
  work_experience   work_experience[]
  social_links      social_links?
  portfolio_images  portfolio_images[]
  youtube_videos    youtube_videos[]
}

model job_posts {
  id                String              @id @default(cuid())
  title             String
  description       String?
  MinSalary         Int
  MaxSalary         Int
  IsAccepting       Boolean
  user_id           String
  currency_id       String
  job_type_id       String
  category_id       String
  city_id           String?
  country_id        String?
  user              user                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  currency          currency            @relation(fields: [currency_id], references: [id], onDelete: Cascade)
  job_type          job_type            @relation(fields: [job_type_id], references: [id], onDelete: Cascade)
  job_category      job_category        @relation(fields: [category_id], references: [id], onDelete: Cascade)
  city              city?               @relation(fields: [city_id], references: [id])
  country           country?            @relation(fields: [country_id], references: [id])
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  job_applications  job_applications[]
}

model city {
  id        String   @id @default(cuid())
  name      String   @unique
  countryId String
  isDeleted Boolean  @default(false)
  country   country  @relation(fields: [countryId], references: [id])
  user_profiles user_profile[]
  job_posts job_posts[]
}

model country {
  id        String   @id @default(cuid())
  name      String   @unique
  isDeleted Boolean  @default(false)
  city      city[]
  user_profiles user_profile[]
  job_posts job_posts[]
}

model job_type {
  id        String     @id @default(cuid())
  name      String     @unique
  isDeleted Boolean    @default(false)
  job_posts job_posts[]
}

model job_category {
  id        String     @id @default(cuid())
  name      String     @unique
  isDeleted Boolean    @default(false)
  job_posts job_posts[]
}

model currency {
  id        String     @id @default(cuid())
  name      String     @unique
  symbol String
  isDeleted Boolean    @default(false)
  job_posts job_posts[]
}

model youtube_videos {
  id              String        @id @default(cuid())
  user_profile_id String
  video_url       String
  title           String
  description     String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  user_profile    user_profile  @relation(fields: [user_profile_id], references: [id], onDelete: Cascade)
}

model work_experience {
  id              String        @id @default(cuid())
  user_profile_id String
  title           String
  role            String
  year            Int
  description     String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  user_profile    user_profile  @relation(fields: [user_profile_id], references: [id], onDelete: Cascade)
}

model portfolio_images {
  id              String        @id @default(cuid())
  user_profile_id String
  image_url       String
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  user_profile    user_profile  @relation(fields: [user_profile_id], references: [id], onDelete: Cascade)
}

model social_links {
  id              String        @id @default(cuid())
  user_profile_id String        @unique
  linkedin        String?
  x               String?
  instagram       String?
  youtube         String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  user_profile    user_profile  @relation(fields: [user_profile_id], references: [id], onDelete: Cascade)
}

model skills {
  id              String        @id @default(cuid())
  name            String
  user_profile_id String
  user_profile    user_profile  @relation(fields: [user_profile_id], references: [id], onDelete: Cascade)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

model job_applications {
  id                     String                  @id @default(cuid())
  job_post_id            String
  user_id                String
  status                 job_application_status  @default(PENDING)
  ai_verification_status ai_verification_status  @default(PENDING)
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  job_post               job_posts               @relation(fields: [job_post_id], references: [id], onDelete: Cascade)
  user                   user                    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  @@unique([job_post_id, user_id], name: "unique_job_application")
}

model roles {
  id                String            @id @default(cuid())
  name              String            @unique
  description       String?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  role_permissions  role_permissions[]
  user              user[]
}

model resource {
  id              String            @id @default(cuid())
  name            String            @unique
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now())
  role_permissions role_permissions[]
}

enum job_application_status {
  PENDING
  ACCEPTED
  REJECTED
}

enum ai_verification_status {
  PENDING
  VERIFIED
  REJECTED
}

enum action_type {
  CREATE
  READ
  UPDATE
  DELETE
}

model role_permissions {
  id            String     @id @default(cuid())
  role_id       String
  resource_id   String
  resource      resource   @relation(fields: [resource_id], references: [id], onDelete: Cascade)
  action_type   action_type
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  role          roles      @relation(fields: [role_id], references: [id], onDelete: Cascade)
}
